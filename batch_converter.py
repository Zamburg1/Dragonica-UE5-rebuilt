# batch_converter.py
# Description: A script to batch convert .nif files to .fbx using Blender.
# Author: Gemini
#
# What it does:
# 1. Prompts the user for the path to a 'scene.json' file generated by map_porter.py.
# 2. Reads the scene.json to find all unique asset paths.
# 3. For each unique asset, it constructs the full source NIF path and the target FBX path.
# 4. It calls Blender in the background to perform the conversion using the 'nif_to_fbx.py' script.
#
# Pre-requisites:
# - Blender must be installed.
# - A NIF importer plugin must be installed and enabled in Blender.
# - 'nif_to_fbx.py' must be in the same directory as this script.
# - You must have generated a scene.json file using map_porter.py.

import os
import json
import subprocess
import sys

# --- Configuration ---
# IMPORTANT: You must set this to the correct path for your Blender installation.
BLENDER_EXECUTABLE_PATH = "C:/Program Files/Blender Foundation/Blender 3.0/blender.exe"
# --- End Configuration ---

def find_nif_files_in_source(unreal_asset_path, source_client_path):
    """
    Converts an Unreal asset path back into a potential source .nif file path.
    Since Unreal paths are simplified, we have to search for the original file.
    """
    if not unreal_asset_path.endswith('.fbx'):
        return None

    # Get the base path without /Game/Assets/ and with .nif extension
    relative_path = unreal_asset_path.replace('/Game/Assets/', '').replace('.fbx', '.nif')
    
    # The original NIF files can be in a few root folders inside 'Data'.
    # We will search common locations like '00_Object', '1_cha', '2_mon', etc.
    search_path = os.path.join(source_client_path, 'Data')
    
    # This is a simplified search. A more robust solution might need to check more folders.
    for root, _, files in os.walk(search_path):
        if os.path.basename(relative_path) in files:
            # We found a file with the right name. Let's assume its path matches.
            # This logic might need refinement if there are duplicate filenames.
            potential_path = os.path.join(root, os.path.basename(relative_path))
            # A quick check to see if the end of the paths match
            if str(potential_path).replace('\\', '/').endswith(relative_path):
                 return potential_path
    
    # Fallback if the smart search fails
    parts = relative_path.replace('\\', '/').split('/')
    if len(parts) > 1:
        fallback_path = os.path.join(source_client_path, 'Data', parts[0], parts[1], parts[2])
        if os.path.exists(fallback_path):
            return fallback_path

    return None

def convert_assets(scene_json_path, source_client_path, unreal_project_path):
    """
    Finds all unique assets in the scene.json and converts them.
    """
    print("--- Starting Batch Asset Conversion ---")

    # Check for Blender executable
    if not os.path.exists(BLENDER_EXECUTABLE_PATH):
        print(f"Error: Blender executable not found at '{BLENDER_EXECUTABLE_PATH}'")
        print("Please update the BLENDER_EXECUTABLE_PATH in this script.")
        return

    # Check for the conversion script
    converter_script_path = os.path.join(os.path.dirname(__file__), 'nif_to_fbx.py')
    if not os.path.exists(converter_script_path):
        print(f"Error: 'nif_to_fbx.py' not found in the same directory as this script.")
        return

    # Read the scene JSON
    try:
        with open(scene_json_path, 'r') as f:
            scene_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"Error reading scene JSON file: {e}")
        return

    # Gather unique asset paths
    unique_assets = set()
    for entity in scene_data.get('entities', []):
        asset_path = entity.get('unreal_asset_path')
        if asset_path and asset_path.endswith('.fbx'):
            unique_assets.add(asset_path)
    
    if not unique_assets:
        print("No convertible assets found in the JSON file.")
        return

    print(f"Found {len(unique_assets)} unique assets to convert.")
    
    converted_count = 0
    failed_count = 0
    
    # Process each asset
    for asset_path in sorted(list(unique_assets)):
        print(f"\n--- Processing Asset: {asset_path} ---")
        
        # Determine source and target paths
        source_nif_path = find_nif_files_in_source(asset_path, source_client_path)
        
        if not source_nif_path or not os.path.exists(source_nif_path):
            print(f"Error: Could not find source NIF file for {asset_path}")
            print(f"Attempted path: {source_nif_path}")
            failed_count += 1
            continue
            
        target_fbx_path = os.path.join(unreal_project_path, 'Content', 'Assets', asset_path.replace('/Game/Assets/', ''))
        
        # Create target directory if it doesn't exist
        os.makedirs(os.path.dirname(target_fbx_path), exist_ok=True)
        
        # Run Blender command
        command = [
            BLENDER_EXECUTABLE_PATH,
            '--background',
            '--python',
            converter_script_path,
            '--',
            source_nif_path,
            target_fbx_path
        ]
        
        print(f"Running Blender command...")
        try:
            # Using DEVNULL to hide Blender's extensive console output for cleanliness
            result = subprocess.run(command, check=True, text=True, capture_output=True)
            if "Error" in result.stdout or "Error" in result.stderr:
                 print("Blender script reported an error:")
                 print(result.stdout)
                 print(result.stderr)
                 failed_count += 1
            else:
                 print("Conversion successful.")
                 converted_count += 1
        except subprocess.CalledProcessError as e:
            print("Blender process failed.")
            print(e.stdout)
            print(e.stderr)
            failed_count += 1
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            failed_count += 1

    print("\n--- Batch Conversion Complete ---")
    print(f"Successfully converted: {converted_count}")
    print(f"Failed to convert: {failed_count}")


def main():
    if len(sys.argv) != 2:
        print("Usage: python batch_converter.py <path_to_scene.json>")
        sys.exit(1)
        
    scene_json_path = sys.argv[1]
    
    # --- Determine project paths ---
    # We assume the script is in the root of the source code folder
    workspace_root = os.path.dirname(__file__)
    source_client_path = os.path.join(workspace_root, 'Client')

    desktop_path = os.path.join(os.path.expanduser('~'), 'Desktop')
    unreal_project_path = os.path.join(desktop_path, 'DragonicaUnreal')
    
    if not os.path.exists(source_client_path):
        print(f"Error: Could not find 'Client' directory in the workspace root '{workspace_root}'")
        sys.exit(1)

    convert_assets(scene_json_path, source_client_path, unreal_project_path)


if __name__ == '__main__':
    main() 